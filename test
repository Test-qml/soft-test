package com.knowledge.graph.controller;

import com.knowledge.graph.entity.*;
import com.knowledge.graph.service.*;
import com.knowledge.graph.utils.Neo4jUtil;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.w3c.dom.NodeList;

import javax.servlet.http.HttpServletRequest;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.Reader;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

@RestController
public class TestController {
    @Autowired
    private Neo4jUtil neo4jUtil;

    @GetMapping("get")
    public Map<String, Object> get() {
        Map<String, Object> retMap = new HashMap<>();
        //cql语句
        String cql = "match (m)-[edge1]-(n) return m,edge1,n";
        //待返回的值，与cql return后的值顺序对应
        Set<Map<String, Object>> m = new HashSet<>();
        Set<Map<String, Object>> edge = new HashSet<>();
        Set<Map<String, Object>> n = new HashSet<>();
        neo4jUtil.getList(cql, m, edge, n);
        retMap.put("m", m);
        retMap.put("edge", edge);
        retMap.put("n", n);
        return retMap;
    }

    @GetMapping("getPath")
    public Map<String, Object> getPath(String id) {
        Map<String, Object> retMap = new HashMap<>();
        //cql语句  ID()可以获取节点自动生成的id
        String cql = "match l=(m)-[]-(n) where ID(m)=" + id + " return l";
        //待返回的值，与cql return后的值顺序对应
        Set<Map<String, Object>> nodeList = new HashSet<>();
        Set<Map<String, Object>> edgeList = new HashSet<>();
        neo4jUtil.getPathList(cql, nodeList, edgeList);
        retMap.put("nodeList", nodeList);
        retMap.put("edgeList", edgeList);
        return retMap;
    }

    @GetMapping("getShortPath")
    public Map<String, Object> getShortPath() {
        Map<String, Object> retMap = new HashMap<>();
        //cql语句
        String cql = "match l=shortestPath(({name:'Keanu Reeves'})-[*]-({title:\"Jerry Maguire\"})) return l";
        //待返回的值，与cql return后的值顺序对应
        Set<Map<String, Object>> nodeList = new HashSet<>();
        Set<Map<String, Object>> edgeList = new HashSet<>();
        neo4jUtil.getPathList(cql, nodeList, edgeList);
        retMap.put("nodeList", nodeList);
        retMap.put("edgeList", edgeList);
        return retMap;
    }

    @GetMapping("getFields")
    public Map<String, Object> getFields() {
        Map<String, Object> retMap = new HashMap<>();
        //cql语句
        //String cql = "match (n:Person{name:\"Anthony Edwards\"}) return n.name as name,n.born as born";
        String cql = "match (n:Person) return count(n) as cou";
        retMap.put("fieldList", neo4jUtil.getFields(cql));
        return retMap;
    }

    //    @PostMapping("upload")
//    public Map<String, Object> upload(){
//        Boolean result = neo4jUtil.importFromCsv("1.csv");
//        Map<String, Object> retMap = new HashMap<>();
//        retMap.put("success",result);
//        return retMap;
//    }
    @Autowired
    UserService userService;

    @GetMapping("getAllUser")
    public List<User> getAllUser() {
        List<User> userList = userService.selectAll();
        return userList;
    }

    @Autowired
    EntityService entityService;

    @GetMapping("getAllEntity")
    public List<NodeEntity> getAllEntity() {
        List<NodeEntity> entityList = entityService.selectAll();
        System.out.println("实体总数：" + entityList.size());
        System.out.println("实体列表：" + entityList);
        return entityList;
    }

    @Autowired
    RelationService relationService;

    @GetMapping("getAllRelation")
    public List<Relation> getAllRelation() {
        List<Relation> relationList = relationService.selectAll();
        return relationList;
    }


    @Autowired
    PaperService paperService;

    @GetMapping("getAllPaper")
    public List<Paper> getAllPaper() {
        List<Paper> paperList = paperService.selectAll();
        return paperList;
    }

    @Autowired
    FileService fileService;

    @GetMapping("getAllFile")
    public List<CsvFile> getAllFile() {
        List<CsvFile> fileList = fileService.selectAll();
        return fileList;
    }

    @RequestMapping("/updateUser")
    public String updateUser(@RequestBody User user) {
        userService.updateUser(user);
        return "success";
    }

    @RequestMapping("/addUser")
    public String addUser(@RequestBody User user) {
        userService.addUser(user);
        return "success";
    }

    @RequestMapping("/login")
    public User login(@RequestBody User user,HttpServletRequest request) {
        List<User> users = userService.selectAll();
        for (User item : users) {
            if (item.getUsername().equals(user.getUsername()) && item.getPassword().equals(user.getPassword())) {
                request.getSession().setAttribute("currentUser", user);
                return item;
            }
        }
        return null;
    }

    @PostMapping("/upload")
    public String handleFileUpload(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
        try {
            Reader reader = new BufferedReader(new InputStreamReader(file.getInputStream(), "gbk"));
            CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT);
            int count = 0;
            boolean isLastCsv = false;
            String entity1ColumnName = "";
            String entity2ColumnName = "";
            List<NodeEntity> nodeList = new ArrayList<>();
            List<Relation> relationList = new ArrayList<>();
            List<Paper> paperList = new ArrayList<>();


//            设置上传文件信息文件，如文件名、上传日期和上传者
            CsvFile csvFile = new CsvFile();
            csvFile.setFilename(file.getOriginalFilename());
            csvFile.setUploadtime(new Date());
//            csvFile.setUploader("admin");
            User currentUser = (User) request.getSession().getAttribute("currentUser");
            if (currentUser != null) {
                csvFile.setUploader(currentUser.getUsername());
            } else {
                csvFile.setUploader("admin");
            }
            fileService.saveAndFlush(csvFile);//将上传文件信息存入mysql


            List<CSVRecord> records = csvParser.getRecords();
            if (records.isEmpty()) {
                return "CSV file is empty";
            }
            //通过第二列列名判断是否为关键技术-关键关联技术表
            CSVRecord columnName = records.get(0);
            if ("摘要".equals(columnName.get(1))) {
                isLastCsv = true;
            }

            //根据isLastCsv判断提取哪几列数据
            int entity1NameIndex = isLastCsv ? 3 : 1;
            int entity2NameIndex = isLastCsv ? 6 : 2;
            int rekevanceIndex = isLastCsv ? 7 : 4;

            //提取关系表的实体类型type
            entity1ColumnName = columnName.get(entity1NameIndex);
            entity2ColumnName = columnName.get(entity2NameIndex);

            List<NodeEntity> allEntities = entityService.selectAll();
//            List<NodeEntity> allEntitiesByEntityType1 = entityService.selectByType(entity1ColumnName);
//            List<NodeEntity> allEntitiesByEntityType2 = entityService.selectByType(entity2ColumnName);

            //遍历上传文件中的数据
            for (CSVRecord record : records) {
                // 跳过标题行
                if (count == 0) {
                    count++;
                    continue;
                }

                String entity1Name = record.get(entity1NameIndex);
                String entity2Name = record.get(entity2NameIndex);

                if (isLastCsv) {
                    Paper paper = new Paper();
                    paper.setTitle(record.get(2));
                    paper.setFileno(csvFile.getNo());
                    String year = record.get(5);
                    if (!year.isEmpty() && year.contains("/")) {
                        paper.setYear(new Date(year));
                    }
                    paper.setRelatedEntity1(entity1Name);
                    paper.setRelatedEntity2(entity2Name);
                    paper.setAddtime(new Date());
                    paper.setAbstractContent(record.get(2));
                    paperList.add(paper);
                }


                String type = entity1ColumnName + "-" + entity2ColumnName;//关系类型，通过列名设置
                //实体不存在于nodeList和数据库实体表中时添加,第一张表提取第一实体【任务】和第二实体【能力】，其他关系表提取第二实体
                if ("任务".equals(entity1ColumnName) && "能力".equals(entity2ColumnName)) {
                    //不允许不同层级的实体有相同的name
//                    addNodeEntityIfNotExist(nodeList, allEntities, entity1Name, entity1ColumnName, csvFile);
//                    addNodeEntityIfNotExist(nodeList, allEntities, entity2Name, entity2ColumnName, csvFile);

                    //允许不同层级的实体有相同的name，但同一层级实体的name必须不同
                    nodeList=addNodeEntityIfNotExist(nodeList, allEntities, entity1Name, entity1ColumnName, csvFile);
                    nodeList=addNodeEntityIfNotExist(nodeList, allEntities, entity2Name, entity2ColumnName, csvFile);

                } else {
//                    addNodeEntityIfNotExist(nodeList, allEntities, entity2Name, entity2ColumnName, csvFile);
                    nodeList=addNodeEntityIfNotExist(nodeList, allEntities, entity2Name, entity2ColumnName, csvFile);
                }

                boolean relationNotExists = relationList.stream().noneMatch(n ->
                        n.getEntity1().equals(entity1Name) && n.getEntity2().equals(entity2Name)) &&
                        relationService.selectAll().stream().noneMatch(n ->
                                n.getEntity1().equals(entity1Name) && n.getEntity2().equals(entity2Name));

                String finalEntity1ColumnName = entity1ColumnName;
                boolean entity1Valid = nodeList.stream().anyMatch(n ->
                        n.getName().equals(entity1Name) && n.getType().equals(finalEntity1ColumnName)) ||
                        entityService.selectByType(entity1ColumnName).stream().anyMatch(n ->
                                n.getName().equals(entity1Name));

                String finalEntity2ColumnName = entity2ColumnName;
                boolean entity2Valid = nodeList.stream().anyMatch(n ->
                        n.getName().equals(entity2Name) && n.getType().equals(finalEntity2ColumnName)) ||
                        entityService.selectByType(entity2ColumnName).stream().anyMatch(n ->
                        n.getName().equals(entity2Name));
                if (relationNotExists && entity1Valid && entity2Valid) {
                    Relation relation = new Relation();
                    relation.setEntity1(entity1Name);
                    relation.setEntity2(entity2Name);
                    relation.setType(type);
                    relation.setAddtime(new Date());
                    if (isLastCsv) {
                        relation.setReason(record.get(8));
                    }
                    String rekevance = record.get(rekevanceIndex);
                    if (rekevance.isEmpty()) {
                        rekevance = "0";
                    }
                    relation.setRekevance(Float.valueOf(rekevance));
                    relation.setFileno(csvFile.getNo());
                    relationList.add(relation);
                }
                count += 1;
            }
            entityService.saveAll(nodeList);
            relationService.saveAll(relationList);
            paperService.saveAll(paperList);
        } catch (Exception e) {
            e.printStackTrace();
            return "Error processing CSV file";
        }
        return "CSV file processed successfully";
    }

    private List<NodeEntity> addNodeEntityIfNotExist(List<NodeEntity> nodeList, List<NodeEntity> allEntities, String entityName, String entityColumnName, CsvFile csvFile) {
        if (nodeList.stream().noneMatch(n -> n.getName().equals(entityName))
                && allEntities.stream().noneMatch(n -> n.getName().equals(entityName))) {
            NodeEntity nodeEntity = new NodeEntity();
            nodeEntity.setName(entityName);
            nodeEntity.setType(entityColumnName);
            nodeEntity.setAddtime(new Date());
            nodeEntity.setTotalpaper(0);
            nodeEntity.setFileno(csvFile.getNo());
            nodeList.add(nodeEntity);
        }
        return nodeList;
    }

}
